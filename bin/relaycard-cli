#!/usr/bin/env python2
import logging
import optparse

from relaycard.card import RelayCard
from relaycard.state import RelayState


def get_opts():
    parser = optparse.OptionParser()

    parser.add_option('-v', '--verbose', dest='verbose', default=0,
        action='count', help='Output verbosity')

    parser.add_option('-q', '--quiet', action='store_true',
        dest='quiet', help='Minimized output (allow easier parsing)')

    parser.add_option('-i', '--interface', dest='interface',
        default='/dev/ttyAMA0', help='Serial interface to use')

    parser.add_option('-a', '--address', dest='address',
        default=None, type='int', help='Relaycard address (not needed for --scan)')

    parser.add_option('-p', '--port', dest='ports', action='append', metavar='PORT',
        default=None, help='Ports to get/set (only for some commands)',
        choices=('0', '1', '2', '3', '4', '5', '6', '7', 'all'))

    parser.add_option('--scan', action='store_true',
        dest='do_scan', help='Scan for relay cards')

    parser.add_option('--get-ports', action='store_true',
        dest='do_get_ports', help='Get port states on relay card')

    parser.add_option('--set-ports', default=None, metavar='STATE',
        dest='do_set_ports', help='Set port states on relay card <on/off>')

    parser.add_option('--toggle-ports', action='store_true',
        dest='do_toggle_ports', help='Toggle port states on relay card')

    (opts, args) = parser.parse_args()

    if opts.ports:
        assert not ('all' in opts.ports and len(opts.ports) > 1)

        if 'all' in opts.ports:
            opts.ports = range(0, 8)
        else:
            opts.ports = [int(i) for i in opts.ports]

    opts.loglevel = max(logging.WARNING - (opts.verbose * 10), 10)

    return parser, opts


if __name__ == '__main__':
    parser, opts = get_opts()

    logger = logging.basicConfig(level=opts.loglevel,
        format='%(asctime)s [%(levelname)s] %(message)s')

    card = RelayCard(opts.interface)

    for i in range(0, 4):
        if card.setup():
            break

    if opts.do_scan:
        if not opts.quiet:
            print 'Available relay cards:'

        for i in range(0, card.card_count):
            if not opts.quiet:
                print '- Card %i -> address for --address: %i' % (i, i+1)
            else:
                print 'card%i=%i' % (i, i+1)

    elif opts.do_get_ports and opts.address:
        if not opts.quiet:
            print 'Reading port states on relay card %i' % opts.address

        state = card.get_ports(opts.address)

        for i in sorted(state.state):
            if opts.ports and i not in opts.ports:
                continue

            if not opts.quiet:
                print 'Port %i is %s' % (i, 'on' if state.state[i] else 'off')
            else:
                print 'port%i=%i' % (i, 1 if state.state[i] else 0)

    elif opts.do_set_ports and opts.do_set_ports in ('on', 'off') and opts.address:
        if not opts.quiet:
            print 'Setting port states on relay card %i' % opts.address

        state = card.get_ports(opts.address)
        for port in opts.ports:
            if not opts.quiet:
                print 'Setting port %i to %s' % (port, opts.do_set_ports)

            state.set_port(port, opts.do_set_ports == 'on')

        card.set_ports(opts.address, state)

    elif opts.do_toggle_ports and opts.address:
        if not opts.quiet:
            print 'Toggling port states on relay card %i' % opts.address

        toggle_state = RelayState()
        for port in opts.ports:
            if not opts.quiet:
                print 'Toggling port %i' % port
            toggle_state.set_port(port, True)

        card.toggle_ports(opts.address, toggle_state)

    else:
        parser.print_help()
